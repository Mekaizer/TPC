@page "/counter"
@rendermode InteractiveAuto
<h1>RUT Verifier</h1>

<form>
    <label for="rut">RUT:</label>
    <input type="text" id="rut" @oninput="HandleRutInput" />
    <button type="submit">Calculate Verification Digit</button>
</form>

<p>Verification digit: @_verificationDigit</p>

@code {
    private string _rut = "";
    private string _verificationDigit = "0";

    private void HandleRutInput(ChangeEventArgs e)
    {
        _rut = (e.Value as string)?.Replace(".", "").Replace("-", "");
        _verificationDigit = CalcularDigitoVerificadorRut(_rut);
        StateHasChanged();
    }

    public static string CalcularDigitoVerificadorRut(string rut)
    {
        // Eliminar puntos y guiones del RUT
        rut = rut.Replace(".", "").Replace("-", "");
        string retorna = "";
        // Convertir el RUT a un arreglo de enteros
        int[] arregloRut = new int[rut.Length];
        for (int i = 0; i < rut.Length; i++)
        {
            arregloRut[i] = int.Parse(rut.Substring(i, 1));
        }

        // Calcular el dígito verificador
        int suma = 0;
        int multiplicador = 2;
        for (int i = arregloRut.Length - 1; i >= 0; i--)
        {
            suma += arregloRut[i] * multiplicador;
            multiplicador = (multiplicador == 7) ? 2 : multiplicador + 1;
        }

        int digitoVerificador = 11 - (suma % 11);
        if (digitoVerificador == 11)
        {
            digitoVerificador = 0;
        }
        else if (digitoVerificador == 10)
        {
            return "K";
        }

        return digitoVerificador.ToString("");
    }
}
<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    //21729939
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

}
